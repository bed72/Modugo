{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"In\u00edcio","text":""},{"location":"index.html#modugo-modularize-injete-e-navegue","title":"Modugo \u2014 Modularize, injete e navegue \ud83d\ude80","text":"<p>\ud83c\udfaf Modugo \u00e9 um sistema modular para Flutter, inspirado no Flutter Modular e no GoRouter Modular. Ele oferece uma forma limpa e organizada de estruturar m\u00f3dulos, rotas e inje\u00e7\u00e3o de depend\u00eancias, mantendo a simplicidade e clareza.</p>"},{"location":"index.html#por-que-modugo","title":"Por que Modugo? \ud83e\udd14","text":"<p>O Modugo nasceu para resolver problemas comuns em apps grandes:</p> <ul> <li>\ud83e\udde9 Modularidade: Divida sua aplica\u00e7\u00e3o em m\u00f3dulos isolados e reutiliz\u00e1veis.</li> <li>\ud83d\udd0d Clareza: Cada m\u00f3dulo define suas rotas e depend\u00eancias de forma expl\u00edcita.</li> <li>\u26a1 Inje\u00e7\u00e3o de depend\u00eancias simples: Baseado em GetIt, as depend\u00eancias s\u00e3o registradas uma vez na inicializa\u00e7\u00e3o.</li> <li>\ud83d\udee3\ufe0f Navega\u00e7\u00e3o robusta: Com integra\u00e7\u00e3o ao GoRouter, gerencie rotas de forma eficiente.</li> </ul> <p>\ud83d\udca1 Nota importante: Diferente de outros frameworks modulares, Modugo n\u00e3o faz o dispose autom\u00e1tico das depend\u00eancias. Todas as inst\u00e2ncias vivem at\u00e9 o encerramento do app.</p>"},{"location":"index.html#slogan-do-modugo","title":"Slogan do Modugo \u2728","text":"<p>Modugo \u2014 Modularize, injete e navegue.</p> <p>Modugo \u00e9 ideal para quem quer organiza\u00e7\u00e3o, modularidade e inje\u00e7\u00e3o de depend\u00eancias simples, sem comprometer a flexibilidade do Flutter.</p>"},{"location":"index.html#base-tecnologica","title":"Base tecnol\u00f3gica \ud83d\udee0\ufe0f","text":"\u00c1rea Tecnologias usadas Navega\u00e7\u00e3o GoRouter Inje\u00e7\u00e3o de Depend\u00eancia GetIt Modulariza\u00e7\u00e3o M\u00f3dulos isolados e desacoplados"},{"location":"index.html#limitacoes","title":"Limita\u00e7\u00f5es \u26a0\ufe0f","text":"<ul> <li>\u274c Sem dispose autom\u00e1tico: Evita inconsist\u00eancia quando m\u00faltiplas rotas compartilham o mesmo m\u00f3dulo.</li> <li>\u2705 Foco na estrutura e clareza, n\u00e3o no gerenciamento autom\u00e1tico de mem\u00f3ria.</li> <li>\ud83d\udd04 Vers\u00e3o 3.x \u00e9 breaking: Mudan\u00e7a no sistema de DI. <p>Ao migrar de vers\u00f5es &lt;3, ser\u00e1 necess\u00e1rio gerenciar manualmente o dispose das depend\u00eancias.</p> </li> </ul>"},{"location":"index.html#principais-pontos","title":"Principais pontos \u2705","text":"<ul> <li> Depend\u00eancias registradas uma vez na inicializa\u00e7\u00e3o.</li> <li> Arquitetura desacoplada e modular.</li> <li> Navega\u00e7\u00e3o simplificada com GoRouter.</li> <li> \u274c Cleanup autom\u00e1tico n\u00e3o dispon\u00edvel.</li> <li> \u26a0\ufe0f Aten\u00e7\u00e3o ao migrar para v3+, mudan\u00e7as de DI.</li> </ul> <p>\u26a0\ufe0f Aten\u00e7\u00e3o: Diferente de alguns frameworks modulares, Modugo n\u00e3o faz o dispose autom\u00e1tico das depend\u00eancias. Todas as inst\u00e2ncias vivem at\u00e9 o encerramento do aplicativo.</p>"},{"location":"documentation/injection/index.html","title":"\ud83e\udde9 Inje\u00e7\u00e3o de Depend\u00eancias","text":"<p>O Modugo possui um sistema de DI baseado no GetIt, permitindo registrar e acessar inst\u00e2ncias de servi\u00e7os de forma centralizada dentro de m\u00f3dulos. Isso facilita a modulariza\u00e7\u00e3o, testes e reutiliza\u00e7\u00e3o de c\u00f3digo.</p>"},{"location":"documentation/injection/index.html#registrando-dependencias","title":"\ud83d\udd39 Registrando Depend\u00eancias","text":"<p>Dentro de cada m\u00f3dulo, voc\u00ea pode registrar binds usando o m\u00e9todo <code>binds()</code>:</p> <pre><code>final class HomeModule extends Module {\n  @override\n  List&lt;Module&gt; imports() =&gt; [CoreModule()]; // importa outros m\u00f3dulos se necess\u00e1rio\n\n  @override\n  List&lt;IModule&gt; routes() =&gt; [\n    ChildRoute(path: '/', child: (context, state) =&gt; const HomePage()),\n  ];\n\n  @override\n  void binds() {\n    i\n      ..registerSingleton&lt;ServiceRepository&gt;(ServiceRepository.instance) // singleton\n      ..registerLazySingleton&lt;OtherServiceRepository&gt;(OtherServiceRepositoryImpl.new); // lazy singleton\n  }\n}\n</code></pre>"},{"location":"documentation/injection/index.html#tipos-de-registro-suportados","title":"\u2705 Tipos de registro suportados:","text":"<ul> <li><code>registerSingleton&lt;T&gt;(instance)</code> \u2192 Inst\u00e2ncia \u00fanica j\u00e1 criada, retornada sempre que requisitada.</li> <li><code>registerLazySingleton&lt;T&gt;(factory)</code> \u2192 Inst\u00e2ncia criada apenas na primeira vez que for requisitada.</li> <li><code>registerFactory&lt;T&gt;(factory)</code> \u2192 Cria uma nova inst\u00e2ncia a cada requisi\u00e7\u00e3o.</li> </ul> <p>\ud83d\udd39 Observa\u00e7\u00e3o: <code>i</code> \u00e9 o Injector do Modugo, equivalente ao <code>GetIt.I</code> no GetIt.</p>"},{"location":"documentation/injection/index.html#acessando-dependencias","title":"\ud83d\udd39 Acessando Depend\u00eancias","text":"<p>Para obter uma inst\u00e2ncia registrada dentro do m\u00f3dulo ou de qualquer widget que fa\u00e7a parte do m\u00f3dulo:</p> <pre><code>final service = i.get&lt;ServiceRepository&gt;();\nfinal service = Modugo.get&lt;ServiceRepository&gt;();\nfinal otherService = context.reade&lt;OtherServiceRepository&gt;();\n</code></pre> <p>\ud83d\udd39 Funciona de forma global dentro do escopo do m\u00f3dulo, garantindo consist\u00eancia e f\u00e1cil substitui\u00e7\u00e3o para testes.</p>"},{"location":"documentation/injection/index.html#comparacao-com-getit","title":"\ud83d\udd39 Compara\u00e7\u00e3o com GetIt","text":"<p>Se voc\u00ea j\u00e1 conhece o GetIt, o fluxo \u00e9 muito parecido:</p> <pre><code>// GetIt\nfinal getIt = GetIt.instance;\ngetIt.registerSingleton&lt;ServiceRepository&gt;(ServiceRepository.instance);\n\n// Modugo\ni.registerSingleton&lt;ServiceRepository&gt;(ServiceRepository.instance);\n</code></pre> <p>Diferen\u00e7as principais:</p> <ul> <li>Suporte direto a rotas modulares, resolvendo binds automaticamente ao acessar uma rota.</li> </ul>"},{"location":"documentation/injection/index.html#ciclo-de-vida-e-modularidade","title":"\ud83d\udd39 Ciclo de Vida e Modularidade","text":"<ul> <li>Lazy Singleton e Factory s\u00e3o criados sob demanda, economizando mem\u00f3ria.</li> <li>Singleton pode ser compartilhado entre m\u00f3dulos importados.</li> <li>Cada m\u00f3dulo pode importar outros m\u00f3dulos, mantendo a hierarquia de depend\u00eancias limpa e previs\u00edvel.</li> </ul>"},{"location":"documentation/injection/index.html#exemplo-visual-de-di","title":"\ud83d\udd39 Exemplo Visual de DI","text":"<pre><code>[HomeModule] ---&gt; Singleton(ServiceRepository)\n              \\-&gt; LazySingleton(OtherServiceRepository)\n\n[ProfileModule] ---&gt; importa HomeModule\n                     Singleton(ServiceRepository) j\u00e1 compartilhado\n                     LazySingleton(ProfileService)\n</code></pre> <p>Visualiza como singleton \u00e9 compartilhado e lazy/factory s\u00e3o criados sob demanda.</p>"},{"location":"documentation/modules/index.html","title":"\ud83c\udfd7 Arquitetura Modular em Flutter","text":"<p>Em uma arquitetura modular, seu app \u00e9 dividido em m\u00f3dulos independentes, cada um respons\u00e1vel por um recurso ou dom\u00ednio espec\u00edfico. Essa abordagem melhora a escalabilidade, testabilidade e manutenibilidade.</p>"},{"location":"documentation/modules/index.html#estrutura-de-projeto-exemplo","title":"\ud83d\udd39 Estrutura de Projeto Exemplo","text":"<pre><code>/lib\n  /modules\n    /home\n      home_page.dart\n      home_module.dart\n    /profile\n      profile_page.dart\n      profile_module.dart\n    /chat\n      chat_page.dart\n      chat_module.dart\n  app_module.dart\n  app_widget.dart\nmain.dart\n</code></pre> <ul> <li><code>/modules</code>: cont\u00e9m todos os m\u00f3dulos de recursos do app.</li> <li> <p>Cada pasta de m\u00f3dulo (ex.: <code>home</code>, <code>profile</code>, <code>chat</code>) cont\u00e9m:</p> </li> <li> <p><code>*_page.dart</code>: a interface principal do m\u00f3dulo</p> </li> <li> <p><code>*_module.dart</code>: respons\u00e1vel pelo roteamento e inje\u00e7\u00e3o de depend\u00eancias do m\u00f3dulo</p> </li> <li> <p><code>app_module.dart</code>: m\u00f3dulo raiz que agrega todos os m\u00f3dulos de recursos e depend\u00eancias globais</p> </li> <li><code>app_widget.dart</code>: widget principal que inicializa o app com rotas e configura\u00e7\u00e3o de m\u00f3dulos</li> <li><code>main.dart</code>: ponto de entrada do app</li> </ul>"},{"location":"documentation/modules/index.html#como-os-modulos-funcionam","title":"\u26a1 Como os M\u00f3dulos Funcionam","text":"<ol> <li>Encapsulamento: Cada m\u00f3dulo gerencia suas pr\u00f3prias rotas, depend\u00eancias e interface.</li> <li>Roteamento: Os m\u00f3dulos definem suas pr\u00f3prias rotas, que s\u00e3o posteriormente compostas pelo m\u00f3dulo raiz.</li> <li>Inje\u00e7\u00e3o de Depend\u00eancia: Cada m\u00f3dulo pode registrar suas pr\u00f3prias depend\u00eancias localmente ou globalmente.</li> <li>Escalabilidade: Novos recursos podem ser adicionados como novos m\u00f3dulos sem afetar os existentes.</li> </ol>"},{"location":"documentation/modules/index.html#exemplo-modulo-app","title":"\ud83d\udcdd Exemplo: M\u00f3dulo App","text":"<pre><code>// app_module.dart\nfinal class AppModule extends Module {\n  @override\n  void binds() {\n    i.registerSingleton&lt;AuthService&gt;((_) =&gt; AuthService());\n  }\n\n  @override\n  List&lt;IModule&gt; routes() =&gt; [\n    ModuleRoute(path: '/', module: HomeModule()),\n    ModuleRoute(path: '/chat', module: ChatModule()),\n    ModuleRoute(path: '/profile', module: ProfileModule()),\n  ];\n}\n</code></pre> <ul> <li><code>binds()</code>: registra depend\u00eancias espec\u00edficas do m\u00f3dulo.</li> <li><code>routes()</code>: declara as rotas do m\u00f3dulo, encapsulando a interface dentro do seu dom\u00ednio.</li> </ul>"},{"location":"documentation/modules/index.html#beneficios","title":"\ud83d\ude80 Benef\u00edcios","text":"<ul> <li>Separa\u00e7\u00e3o de Responsabilidades: UI, rotas e depend\u00eancias s\u00e3o modularizadas.</li> <li>Facilidade de Testes: Cada m\u00f3dulo pode ser testado de forma independente.</li> <li>Reutiliza\u00e7\u00e3o: M\u00f3dulos podem ser reutilizados em diferentes apps.</li> <li>Colabora\u00e7\u00e3o em Equipe: Times podem trabalhar em m\u00f3dulos diferentes simultaneamente sem conflitos.</li> </ul>"},{"location":"documentation/routes/index.html","title":"\ud83d\uddfa Rotas","text":"<p>No Modugo, a navega\u00e7\u00e3o \u00e9 baseada em GoRouter, oferecendo integra\u00e7\u00e3o avan\u00e7ada com deep links e um ecossistema rico em extens\u00f5es e utilidades. Isso permite organizar a UI em p\u00e1ginas, m\u00f3dulos e \u00e1reas espec\u00edficas, mantendo pilhas de navega\u00e7\u00e3o independentes e preserva\u00e7\u00e3o de estado de forma natural.</p>"},{"location":"documentation/routes/index.html#tipos-de-rotas","title":"\ud83d\udd39 Tipos de Rotas","text":""},{"location":"documentation/routes/index.html#childroute","title":"ChildRoute","text":"<p>Representa uma rota simples dentro de um m\u00f3dulo ou p\u00e1gina.</p> <pre><code>ChildRoute(\n  path: '/home',\n  child: (context, state) =&gt; const HomePage(),\n)\n</code></pre>"},{"location":"documentation/routes/index.html#moduleroute","title":"ModuleRoute","text":"<p>Representa um m\u00f3dulo inteiro como rota.</p> <pre><code>ModuleRoute(\n  path: '/profile',\n  module: ProfileModule(),\n)\n</code></pre>"},{"location":"documentation/routes/index.html#shellmoduleroute","title":"ShellModuleRoute","text":"<p>Use <code>ShellModuleRoute</code> quando quiser criar uma \u00e1rea de navega\u00e7\u00e3o interna, semelhante ao <code>RouteOutlet</code> do Flutter Modular. Ideal para layouts com menus ou abas, onde apenas parte da tela muda.</p> <p>\u2139\ufe0f Internamente, utiliza <code>GoRouter</code>'s <code>ShellRoute</code>.</p> <pre><code>final class HomeModule extends Module {\n  @override\n  List&lt;IModule&gt; routes() =&gt; [\n    ShellModuleRoute(\n      builder: (context, state, child) =&gt; PageWidget(child: child),\n      routes: [\n        ChildRoute(path: '/user', child: (_, _) =&gt; const UserPage()),\n        ChildRoute(path: '/config', child: (_, _) =&gt; const ConfigPage()),\n        ChildRoute(path: '/orders', child: (_, _) =&gt; const OrdersPage()),\n      ],\n    ),\n  ];\n}\n</code></pre>"},{"location":"documentation/routes/index.html#statefulshellmoduleroute","title":"StatefulShellModuleRoute","text":"<p>Ideal para navega\u00e7\u00e3o baseada em abas, preservando o estado de cada aba.</p> <p>\u2705 Benef\u00edcios:</p> <ul> <li>Cada aba possui sua pr\u00f3pria pilha de navega\u00e7\u00e3o.</li> <li>Trocar de aba preserva hist\u00f3rico e estado.</li> <li>Integra\u00e7\u00e3o completa com m\u00f3dulos Modugo, incluindo guards e ciclo de vida.</li> </ul> <p>\ud83c\udfaf Casos de uso:</p> <ul> <li>Navega\u00e7\u00e3o inferior com abas independentes (Home, Profile, Favorites)</li> <li>Pain\u00e9is administrativos ou dashboards com navega\u00e7\u00e3o persistente</li> <li>Apps tipo Instagram, Twitter ou apps banc\u00e1rios com fluxos empilhados separados</li> </ul> <p>\ud83d\udca1 Funcionamento: Internamente, utiliza <code>StatefulShellRoute</code> do GoRouter. Cada <code>ModuleRoute</code> se torna uma branch independente com sua pr\u00f3pria pilha de rotas.</p> <pre><code>StatefulShellModuleRoute(\n  builder: (context, state, shell) =&gt; BottomBarWidget(shell: shell),\n  routes: [\n    ModuleRoute(path: '/', module: HomeModule()),\n    ModuleRoute(path: '/profile', module: ProfileModule()),\n    ModuleRoute(path: '/favorites', module: FavoritesModule()),\n  ],\n)\n</code></pre>"},{"location":"documentation/routes/index.html#shell-page-example","title":"Shell Page Example","text":"<pre><code>class PageWidget extends StatelessWidget {\n  final Widget child;\n\n  const PageWidget({super.key, required this.child});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Column(\n        children: [\n          Expanded(child: child),\n          Row(\n            children: [\n              IconButton(icon: const Icon(Icons.person), onPressed: () =&gt; context.go('/user')),\n              IconButton(icon: const Icon(Icons.settings), onPressed: () =&gt; context.go('/config')),\n              IconButton(icon: const Icon(Icons.shopping_cart), onPressed: () =&gt; context.go('/orders')),\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n}\n</code></pre> <p>\u2705 Excelente para sub-navega\u00e7\u00e3o dentro de p\u00e1ginas \ud83c\udfaf \u00datil para dashboards, pain\u00e9is administrativos ou UIs multi-se\u00e7\u00e3o</p>"},{"location":"documentation/routes/index.html#roteamento-com-regex","title":"\ud83d\udd39 Roteamento com Regex","text":"<p>Modugo suporta matchings de rotas poderosos usando padr\u00f5es regex.</p> <ul> <li>Valida caminhos e deep links antes da navega\u00e7\u00e3o</li> <li>Extrai par\u00e2metros din\u00e2micos independentemente do GoRouter</li> <li>Suporta URLs externas, web e l\u00f3gica de redirect personalizada</li> </ul> <pre><code>ChildRoute(\n  path: '/user/:id',\n  child: (_, _) =&gt; const UserPage(),\n  routePattern: RoutePatternModel.from(r'^/user/(\\d+)\\$', paramNames: ['id']),\n)\n\nfinal match = Modugo.matchRoute('/user/42');\nif (match != null) {\n  print(match.route); // rota encontrada\n  print(match.params); // { 'id': '42' }\n} else {\n  print('Nenhuma correspond\u00eancia');\n}\n</code></pre>"},{"location":"documentation/routes/index.html#tipos-de-rotas-suportadas","title":"\ud83d\udd39 Tipos de Rotas Suportadas","text":"<ul> <li>ChildRoute</li> <li>ModuleRoute</li> <li>ShellModuleRoute</li> <li>StatefulShellModuleRoute</li> </ul>"},{"location":"documentation/routes/index.html#utilidades","title":"\u26a1 Utilidades","text":"<ul> <li>Analytics e logging</li> <li>Valida\u00e7\u00e3o de deep links</li> <li>Rotas fallback e redirects</li> </ul>"},{"location":"documentation/routes/index.html#extensoes-de-navegacao","title":"\ud83d\udd39 Extens\u00f5es de Navega\u00e7\u00e3o","text":"<p>Modugo fornece extens\u00f5es em BuildContext que enriquecem a navega\u00e7\u00e3o, oferecendo ferramentas para valida\u00e7\u00e3o de rotas, extra\u00e7\u00e3o de par\u00e2metros e opera\u00e7\u00f5es avan\u00e7adas com GoRouter.</p> <p>ContextMatchExtension</p> <p>Permite:</p> <p>Verificar se um caminho (path) ou nome de rota (name) est\u00e1 registrado.</p> <p>Obter a rota correspondente para um dado local.</p> <p>Extrair par\u00e2metros din\u00e2micos de rotas.</p> <p>\ud83d\udca1 \u00datil para valida\u00e7\u00e3o de links, navega\u00e7\u00e3o condicional e debugging de rotas.</p> <p>Exemplo:</p> <pre><code>final isValid = context.isKnownPath('/settings');\nfinal isNamed = context.isKnownRouteName('profile');\n\nfinal matchedRoute = context.matchingRoute('/user/42');\nfinal params = context.matchParams('/user/42');\nfinal userId = params?['id'];\n</code></pre> <p>ContextNavigationExtension</p> <p>Simplifica opera\u00e7\u00f5es de navega\u00e7\u00e3o padr\u00e3o com GoRouter:</p> <ul> <li>M\u00e9todos de navega\u00e7\u00e3o: <code>go, goNamed, push, pushNamed, replace</code>, etc.</li> <li>Controle de rota atual: <code>reload()</code> para recarregar a p\u00e1gina.</li> <li>Valida\u00e7\u00e3o de navega\u00e7\u00e3o: <code>canPop()</code> e <code>canPush()</code>.</li> <li>Gerenciamento de pilhas de navega\u00e7\u00e3o: <code>replaceStack()</code>.</li> </ul> <p>\ud83d\udca1 Facilita:</p> <ul> <li>Navega\u00e7\u00e3o din\u00e2mica</li> <li>Integra\u00e7\u00e3o com deep links e par\u00e2metros</li> <li>Simplifica\u00e7\u00e3o de opera\u00e7\u00f5es complexas de roteamento</li> </ul> <p>Exemplo:</p> <pre><code>context.go('/home');\n\ncontext.pushNamed('product', pathParameters: {'id': '42'});\n\nif (context.canPop()) context.pop();\n\ncontext.reload();\n\nawait context.replaceStack(['/home', '/profile']);\n</code></pre> <p>\u2705 Essas extens\u00f5es tornam o desenvolvimento de UIs complexas mais simples, seguro e organizado, integrando diretamente o GoRouter ao contexto de forma fluida.</p>"}]}